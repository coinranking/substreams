syntax = "proto3";

package dex.common.v1;

// Main output message for any DEX
message DexOutput {
  DexInfo dex_info = 1;
  repeated PoolCreated pools_created = 2;
  repeated PoolTicker tickers = 3;  // Combines swap activity and rolling volumes
}

// Information about which DEX this data is from
message DexInfo {
  string protocol = 1;    // "uniswap", "pancakeswap", "sushiswap", etc.
  string version = 2;     // "v2", "v3", etc.
  string chain = 3;       // "ethereum", "bsc", "polygon", etc.
  uint64 block_number = 4;
}

// Pool/Pair creation event
message PoolCreated {
  string pool_address = 1;
  string token0 = 2;
  string token1 = 3;
  uint32 fee = 4;          // For V3 DEXes, V2 can use 0 or fixed value
  uint64 block_number = 5;
  string transaction_hash = 6;
  string factory_address = 7;  // Added to identify which factory
}

// Pool ticker data - aggregated activity per pool per block
message PoolTicker {
  // Pool identification
  string pool_address = 1;
  string token0_address = 2;
  string token1_address = 3;
  
  // Block-level volume aggregates (sum of all swaps in this block)
  string volume_token0 = 4;  // Total token0 volume in this block
  string volume_token1 = 5;  // Total token1 volume in this block
  uint32 swap_count = 6;     // Number of swaps in this block
  
  // Price data (token0 per token1)
  string close_price = 7;    // Final price in this block
  
  // 24-hour rolling volumes
  string volume_24h_token0 = 8;
  string volume_24h_token1 = 9;
  
  // Metadata
  uint64 block_number = 10;
  uint64 timestamp = 11;
}