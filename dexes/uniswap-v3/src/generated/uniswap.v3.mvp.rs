// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UniswapV3Output {
    #[prost(message, repeated, tag="1")]
    pub pools_created: ::prost::alloc::vec::Vec<PoolCreated>,
    #[prost(message, repeated, tag="2")]
    pub tokens: ::prost::alloc::vec::Vec<TokenInfo>,
    #[prost(message, repeated, tag="3")]
    pub swaps: ::prost::alloc::vec::Vec<SwapEvent>,
    #[prost(message, repeated, tag="4")]
    pub rolling_volumes: ::prost::alloc::vec::Vec<RollingVolumeData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolCreated {
    #[prost(string, tag="1")]
    pub pool_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub token1: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub fee: u32,
    #[prost(uint64, tag="5")]
    pub block_number: u64,
    #[prost(string, tag="6")]
    pub transaction_hash: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenInfo {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub decimals: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapEvent {
    #[prost(string, tag="1")]
    pub pool_address: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub recipient: ::prost::alloc::string::String,
    /// Amount of token0 swapped (can be negative)
    #[prost(string, tag="4")]
    pub amount0: ::prost::alloc::string::String,
    /// Amount of token1 swapped (can be negative)
    #[prost(string, tag="5")]
    pub amount1: ::prost::alloc::string::String,
    /// Square root of price after swap
    #[prost(string, tag="6")]
    pub sqrt_price: ::prost::alloc::string::String,
    /// Active liquidity at time of swap
    #[prost(string, tag="7")]
    pub liquidity: ::prost::alloc::string::String,
    /// Price tick after swap
    #[prost(int32, tag="8")]
    pub tick: i32,
    #[prost(uint64, tag="9")]
    pub block_number: u64,
    #[prost(string, tag="10")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(uint64, tag="11")]
    pub timestamp: u64,
    #[prost(uint32, tag="12")]
    pub log_ordinal: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RollingVolumeData {
    /// Pool address
    #[prost(string, tag="1")]
    pub pool_address: ::prost::alloc::string::String,
    /// 24-hour rolling volume for token0
    #[prost(string, tag="2")]
    pub token0_volume_24h: ::prost::alloc::string::String,
    /// 24-hour rolling volume for token1
    #[prost(string, tag="3")]
    pub token1_volume_24h: ::prost::alloc::string::String,
    /// Timestamp of last update
    #[prost(uint64, tag="4")]
    pub last_update_timestamp: u64,
    /// Last fully processed 5-minute period
    #[prost(uint64, tag="5")]
    pub last_completed_period: u64,
    /// Number of 5-minute buckets included
    #[prost(uint32, tag="6")]
    pub bucket_count: u32,
}
// @@protoc_insertion_point(module)
